{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","stations","selectOptions","id","name","a","axios","get","res","data","results","options","map","d","this","setState","e","value","label","getStations","getOptions","fetch","json","Station","time","W","T","F","onChange","handleChange","bind","station","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wRAIMA,E,kDAEJ,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CACXC,SAAU,GACVC,cAAgB,GAChBC,GAAI,GACJC,KAAM,IANQ,E,qFAWnB,gCAAAC,EAAA,sEACsBC,IAAMC,IAAK,+CADjC,OACSC,EADT,OAESC,EAAOD,EAAIC,KAAKC,QAEhBC,EAAUF,EAAKG,KAAI,SAAAC,GAAC,MAAK,CAC7B,MAAUA,EAAEV,GACZ,MAAUU,EAAET,SAGdU,KAAKC,SAAS,CAACb,cAAeS,IATjC,gD,gFAYC,SAAaK,GACZF,KAAKC,SAAS,CAACZ,GAAGa,EAAEC,MAAOb,KAAKY,EAAEE,QAClCJ,KAAKK,YAAYH,EAAEC,S,sEAGpB,sBAAAZ,EAAA,sDACIS,KAAKM,aADT,gD,sHAKA,WAAkBjB,GAAlB,mBAAAE,EAAA,sEACoBgB,MAAM,mDAAD,OAAoDlB,IAD7E,cACQK,EADR,gBAEqBA,EAAIc,OAFzB,cAEQb,EAFR,OAGQR,EAAWQ,EAAKC,QACtBI,KAAKC,SAAS,CAACd,aAJjB,kBAKSQ,EAAKC,SALd,gD,2EASA,WAEE,IAAMa,EAAU,SAAC,GAAD,IAAGnB,EAAH,EAAGA,KAAMoB,EAAT,EAASA,KAAMC,EAAf,EAAeA,EAAGC,EAAlB,EAAkBA,EAAGC,EAArB,EAAqBA,EAArB,OACd,gCACI,sEAAwC,iCAASvB,IAAjD,OACA,gDAAkB,iCAASoB,OAC3B,sDAAwB,iCAASC,OACjC,8CAAgB,mCAASC,EAAT,cAChB,6CAAe,mCAASC,EAAT,gBAIrB,OACE,gCACE,cAAC,IAAD,CAAQhB,QAASG,KAAKd,MAAME,cAAe0B,SAAUd,KAAKe,aAAaC,KAAKhB,QAC5E,mDAAqB,iCAASA,KAAKd,MAAMI,OAAzC,gBAAoE,iCAASU,KAAKd,MAAMG,QAEvFW,KAAKd,MAAMC,SAASW,KAAI,SAACmB,GAAD,OACvB,cAACR,EAAD,CACEnB,KAAM2B,EAAQ3B,KACdoB,KAAMO,EAAQP,KACdC,EAAGM,EAAQN,EACXC,EAAGK,EAAQL,EACXC,EAAGI,EAAQJ,GACNI,EAAQ5B,c,GApEP6B,aA4EHlC,ICpEAmC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1901074.chunk.js","sourcesContent":["import React, {Component} from \"react\"\nimport Select from 'react-select'\nimport axios from 'axios'\n\nclass App extends Component {\n\n  constructor(props){\n    super(props)\n    this.state = {\n      stations: [],\n      selectOptions : [],\n      id: \"\",\n      name: ''\n    }\n  }\n\n// Getting all available stations from the API with Axios \n async getOptions(){\n    const res =  await axios.get ('http://apis.is/weather/getAvailableStations')\n    const data = res.data.results\n\n    const options = data.map(d => ({\n      \"value\" : d.id,\n      \"label\" : d.name\n    }))\n\n    this.setState({selectOptions: options})\n  }\n\n  handleChange(e){\n   this.setState({id:e.value, name:e.label})\n   this.getStations(e.value);\n  }\n\n  async componentDidMount(){\n      this.getOptions();  \n  }\n\n// Getting weather observations from the selected station from the API using FETCH\n  async getStations(id) {\n    const res = await fetch(`http://apis.is/weather/observations/en?stations=${id}`);\n    const data = await res.json();\n    const stations = data.results\n    this.setState({stations});\n    return data.results;\n  }\n  \n\n  render() {\n\n    const Station = ({ name, time, W, T, F }) => (\n      <div>\n          <p>Here is the weather observations for <strong>{name}</strong>:</p>\n          <p>Date and time: <strong>{time}</strong></p>\n          <p>Weather description: <strong>{W}</strong></p>\n          <p>Temperature: <strong>{T}Â°C</strong></p>\n          <p>Wind speed: <strong>{F}m/s</strong></p>\n        </div>\n    );\n         \n    return (\n      <div>\n        <Select options={this.state.selectOptions} onChange={this.handleChange.bind(this)} />\n        <p>You have selected <strong>{this.state.name}</strong> whose id is <strong>{this.state.id}</strong></p>\n   \n        {this.state.stations.map((station) => (\n          <Station\n            name={station.name}\n            time={station.time}\n            W={station.W}\n            T={station.T}\n            F={station.F}\n            key={station.id}\n          />\n        ))}\n    </div>\n    )\n  }\n}\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}